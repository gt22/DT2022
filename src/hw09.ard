\import Arith.Nat
\import Function
\import Function.Meta
\import Meta
\import Order.LinearOrder
\import Paths
\import Paths.Meta
\import Utils \hiding (*>, ==<, >==, pmap, qed, suc/=0, transport)
\import lect06 ()
\import lect07 (Decide, no, yes)
\import lect09
\open LinearOrder
-- 1. Закончите определение \instance Monad для Term.

\instance TermMonad : Monad Term
  | return => var
  | >>= {A B : \Set} (t : Term A) (k : A -> Term B) : Term B \elim t {
    | var v => k v
    | unit => unit
    | app t1 t2 => app (t1 >>= k) (t2 >>= k)
    | lam t => lam (t >>= liftM k)
  }
  | return-left a k => idp
  | return-right {A : \Set} (t : Term A) : t >>= return = t \elim t {
    | app a b => pmap2 app (return-right a) (return-right b)
    | lam t => rewrite liftMVar $ pmap lam $ return-right t
    | var v => idp
    | unit => idp
  }
  | >>=-assoc {A B C : \Set} (t : Term A) (f : A -> Term B) (g : B -> Term C) : t >>= f >>= g = t >>= (\lam x => f x >>= g) \elim t {
    | app a b => pmap2 app (>>=-assoc _ _ _) (>>=-assoc _ _ _)
    | lam t => pmap lam $ >>=-assoc _ _ _ *> bind-ext \lam x => \case \elim x \with {
      | nothing => idp
      | just a => unfold liftM $ termMap>>= *> sym termMap>>=-comm
    }
    | var v => idp
    | unit => idp
  } \where {
  \func liftMVar (A : \Set) : liftM (var {A}) = var {Maybe A} => unfold liftM $ ext (\lam m => \case \elim m \with {
    | nothing => idp
    | just a => idp
  })

  \func bind-ext {A B : \Set} {f g : Maybe A -> Term B} {t : Term (Maybe A)} (p : \Pi (x : Maybe A) -> f x = g x) : t >>= f = t >>= g =>
    pmap (t >>=) (ext p)

  \func termMap-is-bind {A B : \Set} {f : A -> B} (t : Term A) : termMap f t = t >>= (var o f) \elim t
    | app a b => pmap2 app (termMap-is-bind _) (termMap-is-bind _)
    | lam t => pmap lam $ termMap-is-bind _ *> bind-ext \lam x => cases x idp
    | var v => idp
    | unit => idp

  \func termMap>>= {A B C : \Set} {f : A -> B} {g : B -> Term C} {t : Term A} : termMap f t >>= g = t >>= (g o f) \elim t
    | app a b => pmap2 app termMap>>= termMap>>=
    | lam t => pmap lam $ termMap>>= *> bind-ext \lam x => cases x idp
    | var v => idp
    | unit => idp

  \func ptermMap {A B : \Set} {t : Term A} => pmap (\lam (k : A -> B) => termMap k t)

  \func termMap-compose {A B C : \Set} {f : A -> B} {g : B -> C} {t : Term A} : termMap g (termMap f t) = termMap (g o f) t \elim t
    | app a b => pmap2 app termMap-compose termMap-compose
    | lam t => pmap lam $ termMap-compose *> ptermMap (sym $ ext \lam m => lect06.fmap-comp _ _ m)
    | var v => idp
    | unit => idp

  \func termMap>>=-comm {A B C : \Set} {f : B -> C} {g : A -> Term B} {t : Term A} : termMap f (t >>= g) = t >>= (\lam x => termMap f (g x)) \elim t
    | app a b => pmap2 app termMap>>=-comm termMap>>=-comm
    | lam t => pmap lam $ termMap>>=-comm *> bind-ext \lam x => \case \elim x \with {
      | nothing => idp
      | just v => unfold liftM $ termMap-compose *> ptermMap (ext \lam m => return-left m _) *> sym termMap-compose
    }
    | var v => idp
    | unit => idp
}

-- 2. Определите отношение многошаговой редукции на Term.

\func Red {V : \Set} (t s : Term V) : \Type => Red' t s
  \where {
    \data Red' {V : \Set} (t s : Term V)
      | red1 (Red1 t s)
      | redstep {k : Term V} (Red1 t k) (Red' k s)
  }

-- 3. Стратегия редукции -- это функция, которая каждому терму сопоставляет либо некоторый терм, к которому он редуцируется за 1 шаг, либо доказательство, что таких термов нет.
--    Определите любую стратегию редукции.

\func isRedex {V : \Set} (t : Term V) : Decide (\Sigma (f : Term (Maybe V)) (x : Term V) (t = app (lam f) x)) \elim t
  | app (lam f) x => yes (f, x, idp)
  | app (app _ _) _ => no (\lam (f, x, p) => \case p)
  | app (var _) _ => no (\lam (f, x, p) => \case p)
  | app unit _ => no (\lam (f, x, p) => \case p)
  | lam t => no (\lam (f, x, p) => \case p)
  | var v => no (\lam (f, x, p) => \case p)
  | unit => no (\lam (f, x, p) => \case p)

\func appleft {V : \Set} (t : Term V) : Term V \elim t
  | app a _ => a
  | _ => unit

\func strategy {V : \Set} (t : Term V) : Decide (\Sigma (s : Term V) (Red1 t s)) \elim t
  | app a b \as t => \case isRedex t \with {
    | yes (f, x, p) => yes (_, redBeta (pmap appleft p) idp)
    | no n => \case strategy a \with {
      | yes (s, r) => yes (_, appLeft r idp)
      | no n' => \case strategy b \with {
        | yes (s, r) => yes (_, appRight idp r)
        | no n'' => no (\lam (s, r) => cases (s arg addPath) \with {
          | app a' b', p => \case rewriteF p r \with {
            | redBeta q _ => n (_, _, pmap2 app q idp)
            | appLeft r' _ => n' (a', r')
            | appRight _ r' => n'' (b', r')
          }
          | lam x, p => \case rewriteF p r \with {
            | redBeta q _ => n (_, _, pmap2 app q idp)
          }
          | var v, p => \case rewriteF p r \with {
            | redBeta q _ => n (_, _, pmap2 app q idp)
          }
          | unit, p => \case rewriteF p r \with {
            | redBeta q _ => n (_, _, pmap2 app q idp)
          }
        })
      }
    }
  }
  | lam t => \case strategy t \with {
    | yes (s, r) => yes (lam s, redLam r)
    | no n => no (\lam (s, r) => cases (s arg addPath) \with {
      | lam s', p => \case rewriteF p r \with {
        | redLam r1 => n (s', r1)
      }
      | app t1 t2, p => \case rewriteF p r
      | var v, p => \case rewriteF p r
      | unit, p => \case rewriteF p r
    })
  }
  | var v => no (\lam (_, r) => \case r)
  | unit => no (\lam (_, r) => \case r)

-- 4. Докажите, что подтермы достижимого терма достижимы.

\func appAccLeft {V : \Set} {t s : Term V} (a : Acc Red1 (app t s)) : Acc Red1 t \elim a
  | acc a => acc (\lam t' r => appAccLeft $ a (app t' s) (appLeft r idp))

\func appAccRight {V : \Set} {t s : Term V} (a : Acc Red1 (app t s)) : Acc Red1 s \elim a
  | acc a => acc (\lam s' r => appAccRight $ a (app t s') (appRight idp r))

\func subLamAcc {V : \Set} {t : Term (Maybe V)} (a : Acc Red1 (lam t)) : Acc Red1 t \elim a
  | acc a => acc (\lam t' r => subLamAcc $ a (lam t') (redLam r))

-- 5. Докажите следующую обобщенную лемму о подстановке и выведите из нее обычную версию: если Г, x : A |- b : B и Г |- a : A, то Г |- b[a/x] : B.

\func termMap-type {V U : \Set} {f : V -> U} {ctx : V -> Type} {ctx' : U -> Type} {t : Term V}
                   {T : Type} (h : hasType ctx t T) (p : \Pi (v : V) -> ctx' (f v) = ctx v)
  : hasType ctx' (termMap f t) T \elim t, T, h
  | unit, Unit, unitType => unitType
  | var v, T, varType idp => varType (p v)
  | app a b, T, appType {F} h h' => appType (termMap-type h p) (termMap-type h' p)
  | lam t, Arr A B, lamType h => lamType $ termMap-type h $ \case \elim __ \with {
    | nothing => idp
    | just v => p v
  }

\func liftType {V : \Set} {ctx : V -> Type} {t : Term V} {T : Type} (h : hasType ctx t T) {X : Type} : hasType (maybe X ctx) (termMap just t) T =>
  termMap-type h (\lam _ => idp)

\func substLem {U V : \Set} (ctx : U -> Type) (b : Term U) (B : Type) (h : hasType ctx b B)
               (ctx' : V -> Type) (a : U -> Term V) (h' : \Pi (u : U) -> hasType ctx' (a u) (ctx u))
  : hasType ctx' (b >>= a) B \elim b, B, h
  | unit, Unit, unitType => unitType
  | var v, B, varType p => rewriteI p $ h' v
  | app t s, B, appType T S => appType (substLem ctx _ _ T ctx' a h') (substLem ctx _ _ S ctx' a h')
  | lam b, Arr A B, lamType h => lamType $ substLem (maybe A ctx) b B h (maybe A ctx') (liftM a) (\lam u => cases u \with {
    | nothing => unfold liftM (varType idp)
    | just u => unfold liftM (liftType $ h' u)
  })

\func substLem1 {U : \Set} {ctx : U -> Type} {a : Term U} {b : Term (Maybe U)} {A B : Type} (h : hasType ctx a A)
                (h' : hasType (maybe A ctx) b B) : hasType ctx (b >>= maybe a var) B =>
  substLem (maybe A ctx) b B h' ctx (maybe a var) $ \case \elim __ \with {
    | nothing => h
    | just v => varType idp
  }

-- 6. Докажите, что если Г |- a : A и Red a a', то Г |- a' : A

\func bind-equiv {V U : \Set} {t : Term V} {f : V -> Term U} : t >>= {TermMonad} f = t >>= {lect09.TermMonad} f \elim t
  | app a b => pmap2 app bind-equiv bind-equiv
  | lam t => pmap lam bind-equiv
  | var v => idp
  | unit => idp

\func redLem {V : \Set} {ctx : V -> Type} {a a' : Term V} (r : Red a a') {A : Type} (h : hasType ctx a A)
  : hasType ctx a' A \elim r
  | Red.red1 r => redLem' r h
  | Red.redstep r r' => redLem r' (redLem' r h)
  \where {
    \func redLem' {V : \Set} {ctx : V -> Type} {a a' : Term V} (r : Red1 a a') {A : Type} (h : hasType ctx a A)
      : hasType ctx a' A \elim a, a', r, A, h
      | app a b, a', redBeta idp p, A, appType {C} (lamType h) h' => rewrite (p, sym bind-equiv) $ substLem1 h' h
      | app a b, app a' b', appLeft r idp, A, appType h h' => appType (redLem' r h) h'
      | app a b, app a' b', appRight idp r, A, appType h h' => appType h (redLem' r h')
      | lam t, lam t', redLam r, Arr A A1, lamType h => lamType (redLem' r h)
  }

-- Optional
-- 7. Для доказательства typeableInterp понадобится вспомогательное утверждение. Докажите его.

\data HeadRed {V : \Set} (x t s : Term V) \elim t, s
  | app a b, app a' b' => headApp (HeadRed x a a') (b = b')
  | app t a', s => headBeta {f : Term (Maybe V)} (x = a') (lam f = t) (f >>= maybe x var = s)

\func redInterp {V : \Set} {x t s : Term V} {T : Type} (r : HeadRed x t s) (acc : Acc Red1 x) (q : Interp T s) : Interp T t
  => {?}
-- 8. Докажите typeableInterp из лекции
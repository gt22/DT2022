-- 1. Установите arend, следуя инструкциям на странице https://arend-lang.github.io/download
--    В IDEA можно просто импортировать данный проект.

-- 2. Определите аналоги следующих функций на языке хаскелл.
{- Haskell:
   second :: Nat -> Nat -> Nat -> Nat
   second _ y _ = y

   apply :: (Nat -> Nat) -> Nat -> Nat
   apply f x = f x

   compose :: (Nat -> Nat) -> (Nat -> Nat) -> Nat -> Nat
   compose f g x = f (g x)

   flip :: (Nat -> Nat -> Nat) -> Nat -> Nat -> Nat
   flip f x y = f y x

   second' = flip (second 0)
-}

\func second (_ y _ : Nat) => y
\func apply (f : Nat -> Nat) (x : Nat) => f x
\func compose (f g : Nat -> Nat) (x : Nat) => f (g x)
\func flip (f : Nat -> Nat -> Nat) (x y : Nat) => f y x
\func second' => flip (second 0)

-- 3. Расставьте приоритеты функций f1, f2, f3, f4, f5 и f6 так, чтобы функция test проходила тайпчекинг.

\import lect01 \hiding (+,*)

\func f1 (x y : Nat) => x
\func f2 : Nat => 0
\func \infixl 1 f3 (f : Nat -> Nat) (z : Nat) : Int => 0
\func f4 : Nat => 0
\func \infixl 2 f5 => f1
\func f6 => f4

\func test => f1 f2 f3 f4 f5 f6

-- 4. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> Bool -> Bool -> Bool
   if True t _ = t
   if False _ e = e
-}

\func if' (b t f : Bool): Bool \elim b
  | true => t
  | false => f

-- 5. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => if' x true y

-- 6. Определите возведение в степень и факториал для натуральных чисел.

\open Nat \hiding (-,div) -- Здесь лежат + и *.

\func \infixr 8 ^ (x y : Nat) : Nat \elim y
  | 0 => 1
  | suc y => x * x ^ y

\func fac (x : Nat) : Nat
  | 0 => 1
  | suc x => suc x * fac x

-- 7. Определите mod и gcd.

\func mod (x y : Nat) => mod' x x y
    \where \func mod' (f x y : Nat) : Nat \elim f
      | 0 => 0
      | suc f => if (x < y) x (mod' f (x - y) y)

\func nateq (x y : Nat) : Bool
  | 0, 0 => true
  | suc x, suc y => nateq x y
  | _, _ => false

\func gcd (x y : Nat) => gcd' (x + y + 1) x y
    \where \func gcd' (f x y : Nat) : Nat \elim f
      | 0 => 0
      | suc f => if (nateq y 0) x (gcd' f y (mod x y))
